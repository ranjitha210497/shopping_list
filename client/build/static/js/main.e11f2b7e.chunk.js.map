{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/ItemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e11f2b7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">\r\n                            ShoppingList\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} />\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://github.com/ranjitha-s\">\r\n                                        Github\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AppNavbar;","import axios from 'axios';\r\nimport {GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\n\r\nexport const getItems = () => dispatch => {\r\n   dispatch(setItemsLoading());\r\n   axios\r\n    .get('/api/items')\r\n    .then(res => \r\n        dispatch({\r\n            type: GET_ITEMS,\r\n            payload: res.data\r\n        })\r\n    )\r\n};\r\n\r\nexport const addItem = item => dispatch => {\r\n    axios\r\n        .post('/api/items', item)\r\n        .then(res => \r\n            dispatch({\r\n                type: ADD_ITEM,\r\n                payload: res.data \r\n            })\r\n        )\r\n};\r\n\r\nexport const deleteItem = id => dispatch => {\r\n    axios\r\n        .delete(`/api/items/${id}`)\r\n        .then(res =>\r\n            dispatch({\r\n                type: DELETE_ITEM,\r\n                payload: id\r\n            })\r\n        )\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n}","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass ShoppingList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n    \r\n    onDeleteClick = (id) => {\r\n        this.props.deleteItem(id);\r\n    };\r\n\r\n    render() {\r\n        const { items } = this.props.item; \r\n        return(\r\n            <Container>\r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\">\r\n                        {items.map(({ _id, name }) => (\r\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                <ListGroupItem>\r\n                                <Button\r\n                                    className=\"remove-btn\"\r\n                                    color=\"danger\"\r\n                                    size=\"sm\"\r\n                                    onClick={this.onDeleteClick.bind(this, _id)}\r\n                                >\r\n                                    &times;\r\n                                </Button>\r\n                                    {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem }) (ShoppingList);","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions/itemActions';\r\n\r\nclass ItemModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newItem = {\r\n            name: this.state.name\r\n        }\r\n\r\n        // Add item via addItem action\r\n        this.props.addItem(newItem);\r\n\r\n        // Close modal\r\n        this.toggle();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Button\r\n                    color=\"dark\"\r\n                    style={{marginBottom: '2rem'}}\r\n                    onClick={this.toggle}\r\n                >Add Item\r\n                </Button>\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <ModalHeader \r\n                        toggle={this.toggle}\r\n                    >\r\n                        Add to Shopping List\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Form \r\n                            onSubmit={this.onSubmit}\r\n                        >\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Item</Label>\r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add shopping item\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                    style={{marginTop: '2rem'}}\r\n                                    block\r\n                                >\r\n                                    Add Item\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import {GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            };\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            };\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware)\r\n));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/ItemModal';\nimport { Container } from 'reactstrap';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar />\n          <Container>\n            <ItemModal />\n            <ShoppingList />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}